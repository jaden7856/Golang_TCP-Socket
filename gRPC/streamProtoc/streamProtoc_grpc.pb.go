// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package streamProtoc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GRPCSendMsgClient is the client API for GRPCSendMsg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCSendMsgClient interface {
	SendMsg(ctx context.Context, opts ...grpc.CallOption) (GRPCSendMsg_SendMsgClient, error)
}

type gRPCSendMsgClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCSendMsgClient(cc grpc.ClientConnInterface) GRPCSendMsgClient {
	return &gRPCSendMsgClient{cc}
}

func (c *gRPCSendMsgClient) SendMsg(ctx context.Context, opts ...grpc.CallOption) (GRPCSendMsg_SendMsgClient, error) {
	stream, err := c.cc.NewStream(ctx, &GRPCSendMsg_ServiceDesc.Streams[0], "/streamProtoc.GRPCSendMsg/SendMsg", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCSendMsgSendMsgClient{stream}
	return x, nil
}

type GRPCSendMsg_SendMsgClient interface {
	Send(*MessageRequest) error
	Recv() (*MessageReply, error)
	grpc.ClientStream
}

type gRPCSendMsgSendMsgClient struct {
	grpc.ClientStream
}

func (x *gRPCSendMsgSendMsgClient) Send(m *MessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gRPCSendMsgSendMsgClient) Recv() (*MessageReply, error) {
	m := new(MessageReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GRPCSendMsgServer is the server API for GRPCSendMsg service.
// All implementations must embed UnimplementedGRPCSendMsgServer
// for forward compatibility
type GRPCSendMsgServer interface {
	SendMsg(GRPCSendMsg_SendMsgServer) error
	mustEmbedUnimplementedGRPCSendMsgServer()
}

// UnimplementedGRPCSendMsgServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCSendMsgServer struct {
}

func (UnimplementedGRPCSendMsgServer) SendMsg(GRPCSendMsg_SendMsgServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (UnimplementedGRPCSendMsgServer) mustEmbedUnimplementedGRPCSendMsgServer() {}

// UnsafeGRPCSendMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCSendMsgServer will
// result in compilation errors.
type UnsafeGRPCSendMsgServer interface {
	mustEmbedUnimplementedGRPCSendMsgServer()
}

func RegisterGRPCSendMsgServer(s grpc.ServiceRegistrar, srv GRPCSendMsgServer) {
	s.RegisterService(&GRPCSendMsg_ServiceDesc, srv)
}

func _GRPCSendMsg_SendMsg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRPCSendMsgServer).SendMsg(&gRPCSendMsgSendMsgServer{stream})
}

type GRPCSendMsg_SendMsgServer interface {
	Send(*MessageReply) error
	Recv() (*MessageRequest, error)
	grpc.ServerStream
}

type gRPCSendMsgSendMsgServer struct {
	grpc.ServerStream
}

func (x *gRPCSendMsgSendMsgServer) Send(m *MessageReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gRPCSendMsgSendMsgServer) Recv() (*MessageRequest, error) {
	m := new(MessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GRPCSendMsg_ServiceDesc is the grpc.ServiceDesc for GRPCSendMsg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCSendMsg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streamProtoc.GRPCSendMsg",
	HandlerType: (*GRPCSendMsgServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMsg",
			Handler:       _GRPCSendMsg_SendMsg_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "streamProtoc.proto",
}
