// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package streamProtoc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SeSaFileClient is the client API for SeSaFile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SeSaFileClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (SeSaFile_UploadClient, error)
}

type seSaFileClient struct {
	cc grpc.ClientConnInterface
}

func NewSeSaFileClient(cc grpc.ClientConnInterface) SeSaFileClient {
	return &seSaFileClient{cc}
}

func (c *seSaFileClient) Upload(ctx context.Context, opts ...grpc.CallOption) (SeSaFile_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &SeSaFile_ServiceDesc.Streams[0], "/streamProtoc.SeSaFile/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &seSaFileUploadClient{stream}
	return x, nil
}

type SeSaFile_UploadClient interface {
	Send(*DataFiles) error
	Recv() (*UploadStatus, error)
	grpc.ClientStream
}

type seSaFileUploadClient struct {
	grpc.ClientStream
}

func (x *seSaFileUploadClient) Send(m *DataFiles) error {
	return x.ClientStream.SendMsg(m)
}

func (x *seSaFileUploadClient) Recv() (*UploadStatus, error) {
	m := new(UploadStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SeSaFileServer is the server API for SeSaFile service.
// All implementations must embed UnimplementedSeSaFileServer
// for forward compatibility
type SeSaFileServer interface {
	Upload(SeSaFile_UploadServer) error
	mustEmbedUnimplementedSeSaFileServer()
}

// UnimplementedSeSaFileServer must be embedded to have forward compatible implementations.
type UnimplementedSeSaFileServer struct {
}

func (UnimplementedSeSaFileServer) Upload(SeSaFile_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedSeSaFileServer) mustEmbedUnimplementedSeSaFileServer() {}

// UnsafeSeSaFileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SeSaFileServer will
// result in compilation errors.
type UnsafeSeSaFileServer interface {
	mustEmbedUnimplementedSeSaFileServer()
}

func RegisterSeSaFileServer(s grpc.ServiceRegistrar, srv SeSaFileServer) {
	s.RegisterService(&SeSaFile_ServiceDesc, srv)
}

func _SeSaFile_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SeSaFileServer).Upload(&seSaFileUploadServer{stream})
}

type SeSaFile_UploadServer interface {
	Send(*UploadStatus) error
	Recv() (*DataFiles, error)
	grpc.ServerStream
}

type seSaFileUploadServer struct {
	grpc.ServerStream
}

func (x *seSaFileUploadServer) Send(m *UploadStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *seSaFileUploadServer) Recv() (*DataFiles, error) {
	m := new(DataFiles)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SeSaFile_ServiceDesc is the grpc.ServiceDesc for SeSaFile service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SeSaFile_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streamProtoc.SeSaFile",
	HandlerType: (*SeSaFileServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _SeSaFile_Upload_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "streamProtoc/streamProtoc.proto",
}
